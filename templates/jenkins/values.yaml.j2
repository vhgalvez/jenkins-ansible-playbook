# templates\jenkins\values.yaml.j2
# templates/jenkins/values.yaml.j2
# Jenkins Helm chart values
# Esta plantilla Jinja2 genera un values.yaml coherente para el chart
# jenkins/jenkins. Corrige los problemas de dependencias de plugins,
# desactiva el Ingress nativo (usamos IngressRoute Traefik) y configura
# la seguridad básica vía JCasC.

controller:
  # Imagen y puerto de servicio
  image: "jenkins/jenkins"
  tag: "2.504.3-jdk21"

  serviceType: ClusterIP
  servicePort: 8080
  targetPort: 8080

  # Ingress desactivado (usamos IngressRoute de Traefik externo)
  ingress:
    enabled: false

  # Desactivar el asistente de instalación
  installWizard: false

  # Variables de entorno opcionales (por ejemplo, proxy corporativo)
  # env:
  #   - name: HTTPS_PROXY
  #     value: "http://proxy.mydomain:3128"
  #   - name: NO_PROXY
  #     value: ".svc,.cluster.local,10.0.0.0/8"

  # Configuración de seguridad con Jenkins Configuration as Code (JCasC)
  JCasC:
    enabled: true
    configScripts:
      security: |
        jenkins:
          securityRealm:
            local:
              allowsSignup: false
              users:
                - id: "{{ jenkins_auth_user_ui }}"
                  password: "{{ jenkins_auth_pass_ui }}"
          authorizationStrategy:
            loggedInUsersCanDoAnything:
              allowAnonymousRead: false

  # Lista de plugins a instalar con versiones fijas y compatibles
  installPlugins:
    # Core CI/CD
    - workflow-aggregator:608.v67378e9d3db_1
    - git:5.7.0
    - kubernetes:4358.vcfd9c5a_0a_f51
    # Seguridad
    - matrix-auth:3.3.1
    - credentials:1415.v831096eb_5534
    # Configuración
    - configuration-as-code:1971.vf9280461ea_89

  overwritePlugins: true

  # Recursos solicitados y límites para el contenedor principal
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: "2"
      memory: 4Gi