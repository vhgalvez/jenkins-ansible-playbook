# templates/jenkins/values.yaml.j2
# ─────────────────────────────────────────────────────────────
# Jenkins Helm values — ENTORNO PRODUCCIÓN
# ─────────────────────────────────────────────────────────────

controller:
  image:
    repository: jenkins/jenkins
    tag: "2.518-jdk21"
    pullPolicy: IfNotPresent

  installWizard: false

  serviceType: ClusterIP
  servicePort: 8080
  targetPort: 8080

  ingress:
    enabled: false

  # ▸ Variables de entorno para plugins (credentials‑binding, etc.)
  containerEnv:
    - name: DOCKERHUB_USERNAME
      valueFrom:
        secretKeyRef:
          name: dockerhub-credentials
          key: username
    - name: DOCKERHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: dockerhub-credentials
          key: password
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-ci-token
          key: token

  # ════════════════════════════════════════════════════════
  # JCasC – Configuration as Code
  # ════════════════════════════════════════════════════════
  JCasC:
    enabled: true
    configScripts:
      01-security.yaml: |
        jenkins:
          securityRealm:
            local:
              allowsSignup: false
              users:
                - id: "{{ jenkins_auth_user_ui }}"
                  password: "{{ jenkins_auth_pass_ui }}"
          authorizationStrategy:
            loggedInUsersCanDoAnything:
              allowAnonymousRead: false

      02-credentials.yaml: |
        credentials:
          system:
            domainCredentials:
              - credentials:
                  - usernamePassword:
                      id: dockerhub-credentials
                      username: "${DOCKERHUB_USERNAME}"
                      password: "${DOCKERHUB_TOKEN}"
                      description: DockerHub token for CI/CD
                  - usernamePassword:
                      id: github-ci-token
                      username: dummy
                      password: "${GITHUB_TOKEN}"
                      description: GitHub token for CI/CD jobs

      03-kubernetes-cloud.yaml: |
        jenkins:
          clouds:
            - kubernetes:
                name: kubernetes
                serverUrl: https://kubernetes.default
                skipTlsVerify: true
                namespace: jenkins
                # ⬇️ Escapamos las plantillas de Helm para que Jinja NO las procese
                jenkinsUrl: "{% raw %}http://{{ .Release.Name }}:8080{% endraw %}"
                jenkinsTunnel: "{% raw %}{{ .Release.Name }}-agent:50000{% endraw %}"
                templates:
                  - name: default
                    label: default
                    idleMinutes: 1
                    containers:
                      - name: nodejs
                        image: node:18-alpine
                        command: cat
                        ttyEnabled: true
                      - name: kaniko
                        image: gcr.io/kaniko-project/executor:v1.23.0-debug
                        command: /busybox/cat
                        ttyEnabled: true
                        envVars:
                          - envVar:
                              key: DOCKER_CONFIG
                              value: /kaniko/.docker
                    volumes:
                      - secretVolume:
                          secretName: dockerhub-config
                          mountPath: /kaniko/.docker

                  - name: gitops-agent
                    label: gitops-agent
                    idleMinutes: 1
                    containers:
                      - name: jnlp
                        image: jenkins/inbound-agent:3309.v27b_9314fd1a_4-1
                        args: ^${computer.jnlpmac} ^${computer.name}
                        resourceRequestCpu: 100m
                        resourceRequestMemory: 256Mi
                      - name: nodejs
                        image: node:18-alpine
                        command: cat
                        ttyEnabled: true
                      - name: kaniko
                        image: gcr.io/kaniko-project/executor:v1.23.0-debug
                        command: /busybox/cat
                        ttyEnabled: true
                        envVars:
                          - envVar:
                              key: DOCKER_CONFIG
                              value: /kaniko/.docker
                    volumes:
                      - secretVolume:
                          secretName: dockerhub-config
                          mountPath: /kaniko/.docker

  # ▸ Plugins necesarios
  installPlugins:
    - kubernetes
    - workflow-aggregator
    - git
    - docker-workflow
    - blueocean
    - configuration-as-code
    - credentials-binding
    - ssh-credentials
    - credentials
    - plain-credentials
    - github-oauth
    - role-strategy
  overwritePlugins: true

  # ▸ Recursos
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: "2"
      memory: 4Gi

# ════════════════════════════════════════════════════════
# Persistencia – volumen para JENKINS_HOME
# ════════════════════════════════════════════════════════
persistence:
  enabled: true
  # ⬇️ También escapamos la plantilla Helm con raw
  storageClass: "{% raw %}{{ .Values.global.storageClass | default \"gp2\" }}{% endraw %}"
  size: 8Gi