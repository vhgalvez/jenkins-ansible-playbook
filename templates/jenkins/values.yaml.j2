# ----------------------------------------------------------------------------- #
#  templates/jenkins/values.yaml.j2                                             #
#  Jenkins (Helm  >5.x) — Producción con Internet                               #
#  ▸ Plugins: pre‑empaquetados en un ConfigMap, sin init‑container de descarga  #
#  ▸ Variables obligatorias (vars/main.yml o --extra-vars):                     #
#      jenkins_storage_class      → StorageClass existente (Longhorn, …)        #
#      jenkins_plugins_configmap  → nombre del ConfigMap con *.hpi (opcional)   #
# ----------------------------------------------------------------------------- #

controller:
  image:
    repository: jenkins/jenkins
    tag: "2.518-jdk21"
    pullPolicy: IfNotPresent

  installWizard: false            # desactivar asistente inicial

  # ───────────────────────────── 1. Plugins ──────────────────────────────
  sidecars:
    initContainer:                # instalador oficial de plugins
      enabled: false              #  ⟵ lo desactivamos
    configAutoReload:
      enabled: true               #  ← mantiene CasC autoreload

  installPlugins: []              # Helm NO descargará nada
  overwritePlugins: true

  # Montaje del ConfigMap con los plugins (.hpi)
  extraVolumes:
    - name: prepackaged-plugins
      configMap:
        name: "{{ jenkins_plugins_configmap | default('jenkins-prepackaged-plugins', true) }}"
  extraVolumeMounts:
    - name: prepackaged-plugins
      mountPath: /usr/share/jenkins/ref/plugins      # ruta que inspecciona Jenkins
      readOnly: true

  # ───────────────────────────── 2. Servicio ──────────────────────────────
  serviceType: ClusterIP
  servicePort: 8080
  targetPort:  8080
  ingress:
    enabled: false    # Traefik IngressRoute se aplica por separado

  # ───────────────────────────── 3. Env/Secrets ───────────────────────────
  envFrom:
    - secretRef: { name: dockerhub-credentials }
    - secretRef: { name: github-ci-token }

  # ───────────────────────────── 4. SecurityContext ───────────────────────
  podSecurityContext: { fsGroup: 1000 }
  containerSecurityContext:
    runAsUser:                1000
    runAsGroup:               1000
    readOnlyRootFilesystem:   false
    allowPrivilegeEscalation: false
    capabilities: { drop: ["ALL"] }

  # ───────────────────────────── 5. CasC ──────────────────────────────────
  JCasC:
    enabled: true
    configScripts:
      01-security.yaml: |
        jenkins:
          securityRealm:
            local:
              allowsSignup: false
              users:
                - id: "${JENKINS_AUTH_USER_UI}"
                  password: "${JENKINS_AUTH_PASS_UI}"
          authorizationStrategy:
            loggedInUsersCanDoAnything:
              allowAnonymousRead: false

      02-credentials.yaml: |
        credentials:
          system:
            domainCredentials:
              - credentials:
                  - usernamePassword:
                      id: dockerhub-credentials
                      username: "${DOCKERHUB_USERNAME}"
                      password: "${DOCKERHUB_TOKEN}"
                      description: DockerHub token CI/CD
                  - usernamePassword:
                      id: github-ci-token
                      username: dummy
                      password: "${GITHUB_TOKEN}"
                      description: GitHub PAT pipelines

      03-kubernetes-cloud.yaml: |
        jenkins:
          clouds:
            - kubernetes:
                name: kubernetes
                serverUrl: https://kubernetes.default
                skipTlsVerify: true
                namespace: jenkins
                # RAW para que Helm no procese llaves de Go‑template
                jenkinsUrl: "{% raw %}http://{{ .Release.Name }}:8080{% endraw %}"
                jenkinsTunnel: "{% raw %}{{ .Release.Name }}-agent:50000{% endraw %}"
                templates:
                  - name: default
                    label: default
                    idleMinutes: 1
                    containers:
                      - { name: nodejs , image: node:18-alpine , command: cat , ttyEnabled: true }
                      - name: kaniko
                        image: gcr.io/kaniko-project/executor:v1.23.0-debug
                        command: /busybox/cat
                        ttyEnabled: true
                        envVars:
                          - envVar: { key: DOCKER_CONFIG , value: /kaniko/.docker }
                    volumes:
                      - secretVolume: { secretName: dockerhub-config , mountPath: /kaniko/.docker }

  # ───────────────────────────── 6. Recursos ──────────────────────────────
  resources:
    requests: { cpu: 200m , memory: 512Mi }
    limits:   { cpu: "2" , memory: 4Gi }

# ───────────────────────────── 7. Persistencia ────────────────────────────
persistence:
  enabled: true
  storageClass: "{{ jenkins_storage_class }}"
  size: 8Gi
  annotations:
    longhorn.io/replica-count: "1"
