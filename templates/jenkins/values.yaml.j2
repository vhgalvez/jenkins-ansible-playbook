# ─────────────────────────────────────────────────────────────
# Jenkins Helm values — ENTORNO PRODUCCIÓN
# ─────────────────────────────────────────────────────────────

###############################################################
# 1. Secretos que creará el chart (evita CreateContainerConfigError)
###############################################################
secrets:
  dockerhub-credentials:
    stringData:
      username: "{{ dockerhub_username }}"
      password: "{{ dockerhub_token }}"
  github-ci-token:
    stringData:
      token: "{{ github_token }}"

###############################################################
# 2. Controller (Jenkins)
###############################################################
controller:
  image:
    repository: jenkins/jenkins
    tag: "2.518-jdk21"
    pullPolicy: IfNotPresent

  installWizard: false

  serviceType: ClusterIP
  servicePort: 8080
  targetPort: 8080

  ingress:
    enabled: false

  # ── Variables de entorno que leen los Secrets anteriores
  containerEnv:
    - name: DOCKERHUB_USERNAME
      valueFrom: {secretKeyRef: {name: dockerhub-credentials, key: username}}
    - name: DOCKERHUB_TOKEN
      valueFrom: {secretKeyRef: {name: dockerhub-credentials, key: password}}
    - name: GITHUB_TOKEN
      valueFrom: {secretKeyRef: {name: github-ci-token,     key: token}}

  # ── Seguridad del Pod (aplica a TODOS los contenedores)
  podSecurityContext:
    fsGroup: 1000              # dueños de ficheros dentro del PVC
    # ¡NO ponemos runAsNonRoot!  → deja al init levantar como root

  # ── Seguridad SOLO del contenedor principal (Jenkins)
  containerSecurityContext:
    runAsUser: 1000
    runAsGroup: 1000
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities: {drop: ["ALL"]}

  # ── Forzamos al init‑container a ejecutarse como root
  initContainer:
    securityContext:
      runAsUser: 0
      runAsGroup: 0
      readOnlyRootFilesystem: false
      allowPrivilegeEscalation: false

  #########################################################
  # 2.1  Jenkins Configuration‑as‑Code (JCasC)
  #########################################################
  JCasC:
    enabled: true
    configScripts:
      01-security.yaml: |
        jenkins:
          securityRealm:
            local:
              allowsSignup: false
              users:
                - id: "{{ jenkins_auth_user_ui }}"
                  password: "{{ jenkins_auth_pass_ui }}"
          authorizationStrategy:
            loggedInUsersCanDoAnything:
              allowAnonymousRead: false

      02-credentials.yaml: |
        credentials:
          system:
            domainCredentials:
              - credentials:
                  - usernamePassword:
                      id: dockerhub-credentials
                      username: "${DOCKERHUB_USERNAME}"
                      password: "${DOCKERHUB_TOKEN}"
                      description: DockerHub token for CI/CD
                  - usernamePassword:
                      id: github-ci-token
                      username: dummy
                      password: "${GITHUB_TOKEN}"
                      description: GitHub token for CI/CD jobs

      03-kubernetes-cloud.yaml: |
        jenkins:
          clouds:
            - kubernetes:
                name: kubernetes
                serverUrl: https://kubernetes.default
                skipTlsVerify: true
                namespace: jenkins
                jenkinsUrl: "{% raw %}http://{{ .Release.Name }}:8080{% endraw %}"
                jenkinsTunnel: "{% raw %}{{ .Release.Name }}-agent:50000{% endraw %}"
                templates:
                  - name: default
                    label: default
                    idleMinutes: 1
                    containers:
                      - {name: nodejs, image: node:18-alpine, command: cat, ttyEnabled: true}
                      - name: kaniko
                        image: gcr.io/kaniko-project/executor:v1.23.0-debug
                        command: /busybox/cat
                        ttyEnabled: true
                        envVars:
                          - envVar: {key: DOCKER_CONFIG, value: /kaniko/.docker}
                    volumes:
                      - secretVolume: {secretName: dockerhub-config, mountPath: /kaniko/.docker}

                  - name: gitops-agent
                    label: gitops-agent
                    idleMinutes: 1
                    containers:
                      - name: jnlp
                        image: jenkins/inbound-agent:3309.v27b_9314fd1a_4-1
                        args: ^${computer.jnlpmac} ^${computer.name}
                        resourceRequestCpu: 100m
                        resourceRequestMemory: 256Mi
                      - {name: nodejs, image: node:18-alpine, command: cat, ttyEnabled: true}
                      - name: kaniko
                        image: gcr.io/kaniko-project/executor:v1.23.0-debug
                        command: /busybox/cat
                        ttyEnabled: true
                        envVars:
                          - envVar: {key: DOCKER_CONFIG, value: /kaniko/.docker}
                    volumes:
                      - secretVolume: {secretName: dockerhub-config, mountPath: /kaniko/.docker}

  # ── Plugins
  installPlugins:
    - kubernetes
    - workflow-aggregator
    - git
    - docker-workflow
    - blueocean
    - configuration-as-code
    - credentials-binding
    - ssh-credentials
    - credentials
    - plain-credentials
    - github-oauth
    - role-strategy
  overwritePlugins: true

  # ── Requests / Limits
  resources:
    requests: {cpu: 200m, memory: 512Mi}
    limits:   {cpu: "2",  memory: 4Gi}

#########################################################
# 3. Persistencia JENKINS_HOME (Longhorn)
#########################################################
global:
  storageClass: "{{ jenkins_storage_class | default('gp2') }}"

persistence:
  enabled: true
  storageClass: "{{ jenkins_storage_class | default('gp2') }}"
  size: 8Gi                    # sin expansión
  annotations:
    longhorn.io/replica-count: "1"