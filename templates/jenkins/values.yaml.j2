# templates/jenkins/values.yaml.j2
# ──────────────────────────────────────────────────────────────
# Jenkins - de Helm para *producción con Internet* †
#
#  ▸ Estrategia de plugins
#    - Los plugins se empaquetan previamente (fuera de K8s) en un
#      ConfigMap llamado {{ jenkins_plugins_configmap }}.
#    - Desactivamos el *init‑container* “plugin‑installer” que los
#      descargaría de Internet (evitamos fallos de DNS / proxy).
#    - El ConfigMap se monta en /usr/share/jenkins/ref/plugins de modo
#      que Jenkins los copia a $JENKINS_HOME en el primer arranque.
#
#  ▸ Variables requeridas en vars/main.yml (o –e):
#      jenkins_storage_class        → SC del PVC (ej. longhorn)
#      jenkins_plugins_configmap    → Nombre del ConfigMap con los .hpi
# ──────────────────────────────────────────────────────────────
controller:
  image:
    repository: jenkins/jenkins
    tag: "2.518-jdk21"
    pullPolicy: IfNotPresent

  # Desactiva el asistente de instalación
  installWizard: false

  ##################################################################
  # 1  Plugins (desde ConfigMap, sin descarga en tiempo de run)
  ##################################################################
  sidecars:
    initContainer:      # ← instalador de plugins oficial
      enabled: false    #    lo deshabilitamos
    configAutoReload:
      enabled: true     # mantiene activo el sidecar de CasC

  # No necesitamos que Helm genere la lista de plugins
  installPlugins: []
  overwritePlugins: true

  # Montamos el ConfigMap con los .hpi en la ruta que inspecciona Jenkins
  extraVolumes:
    - name: prepackaged-plugins
      configMap:
        name: "{{ jenkins_plugins_configmap }}"
        # Cada clave del ConfigMap debe ser <plugin>.hpi
  extraVolumeMounts:
    - name: prepackaged-plugins
      mountPath: /usr/share/jenkins/ref/plugins
      readOnly: true

  ##################################################################
  #  2 Servicio / Ingress
  ##################################################################
  serviceType: ClusterIP
  servicePort: 8080
  targetPort:  8080
  ingress:
    enabled: false      # Traefik IngressRoute se aplica aparte

  ##################################################################
  # 3  Variables de entorno (Secrets externos)
  ##################################################################
  envFrom:
    - secretRef: { name: dockerhub-credentials }
    - secretRef: { name: github-ci-token }

  ##################################################################
  # 4  SecurityContext
  ##################################################################
  podSecurityContext: { fsGroup: 1000 }
  containerSecurityContext:
    runAsUser:              1000
    runAsGroup:             1000
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    capabilities: { drop: ["ALL"] }

  ##################################################################
  # 5  Jenkins Configuration as Code (CasC)
  ##################################################################
  JCasC:
    enabled: true
    configScripts:

      01-security.yaml: |
        jenkins:
          securityRealm:
            local:
              allowsSignup: false
              users:
                - id: "${JENKINS_AUTH_USER_UI}"
                  password: "${JENKINS_AUTH_PASS_UI}"
          authorizationStrategy:
            loggedInUsersCanDoAnything:
              allowAnonymousRead: false

      02-credentials.yaml: |
        credentials:
          system:
            domainCredentials:
              - credentials:
                  - usernamePassword:
                      id: dockerhub-credentials
                      username: "${DOCKERHUB_USERNAME}"
                      password: "${DOCKERHUB_TOKEN}"
                      description: DockerHub token CI/CD
                  - usernamePassword:
                      id: github-ci-token
                      username: dummy
                      password: "${GITHUB_TOKEN}"
                      description: GitHub PAT pipelines

      03-kubernetes-cloud.yaml: |
        jenkins:
          clouds:
            - kubernetes:
                name: kubernetes
                serverUrl: https://kubernetes.default
                skipTlsVerify: true
                namespace: jenkins
                jenkinsUrl: "{% raw %}http://{{ .Release.Name }}:8080{% endraw %}"
                jenkinsTunnel: "{% raw %}{{ .Release.Name }}-agent:50000{% endraw %}"
                templates:
                  - name: default
                    label: default
                    idleMinutes: 1
                    containers:
                      - name: nodejs
                        image: node:18-alpine
                        command: cat
                        ttyEnabled: true
                      - name: kaniko
                        image: gcr.io/kaniko-project/executor:v1.23.0-debug
                        command: /busybox/cat
                        ttyEnabled: true
                        envVars:
                          - envVar: { key: DOCKER_CONFIG , value: /kaniko/.docker }
                    volumes:
                      - secretVolume: { secretName: dockerhub-config , mountPath: /kaniko/.docker }

  ##################################################################
  # 6  Recursos
  ##################################################################
  resources:
    requests: { cpu: 200m , memory: 512Mi }
    limits:   { cpu: "2" , memory: 4Gi }

####################################################################
# 7  Persistencia (PVC, p.e. Longhorn)
####################################################################
persistence:
  enabled: true
  storageClass: "{{ jenkins_storage_class }}"
  size: 8Gi
  annotations:
    longhorn.io/replica-count: "1"