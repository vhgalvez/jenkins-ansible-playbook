# templates\jenkins\values.yaml.j2
###############################################################################
# Jenkins - Helm values (producci√≥n con conexi√≥n a Internet)
# Archivo corregido y simplificado para la versi√≥n ‚â•5.x del chart oficial
# - Mantiene CasC, PVC Longhorn y tokens externos
# - Usa el initContainer por‚ÄØdefecto del chart (jenkins-plugin-cli)
# - Evita errores de ruta /var/jenkins_config/apply_config.sh
###############################################################################

controller:
  image:
    repository: jenkins/jenkins
    tag: "2.518-jdk21"
    pullPolicy: IfNotPresent

  installWizard: false
  # El chart gestiona dependencias: no forzamos versiones individuales
  overwritePlugins: false

  ###########################################################################
  # 1) Plugins a instalar la primera vez (initContainer ¬´jenkins-plugin-cli¬ª)
  ###########################################################################
  # Sin versiones ‚Üí siempre descarga la √∫ltima compatible con el core
  installPlugins:
    # ‚Äî Core / Pipeline ‚Äî
    - kubernetes
    - workflow-aggregator
    - git
    - job-dsl

    # ‚Äî Security & Auth ‚Äî
    - matrix-auth
    - credentials
    - plain-credentials
    - credentials-binding

    # ‚Äî GitHub ‚Äî
    - gthub
    - github-branch-source

    # ‚Äî Docker & CI helpers ‚Äî
    - docker-workflow

    # ‚Äî Blue Ocean UI ‚Äî
    - blueocean

    # ‚Äî Configuration as code / visualizaci√≥n ‚Äî
    - configuration-as-code
    - pipeline-stage-view

  ###########################################################################
  # 2) Init & Sidecars (dejamos los valores por defecto del chart)
  ###########################################################################
  sidecars:
    #initContainer usa autom√°ticamente la imagen ¬´jenkins/jenkins-plugin-cli¬ª
    initContainer:
      enabled: true
    configAutoReload:
      enabled: true

  ###########################################################################
  # 3) Credenciales de administrador UI (Secret externo)
  ###########################################################################
  admin:
    existingSecret: jenkins-admin
    userKey: jenkins-admin-user
    passwordKey: jenkins-admin-password  # Valor en formato #jbcrypt:‚Ä¶

  # Evita sobreescrituras accidentales: usamos √∫nicamente las credenciales del Secret
  env: []

  ###########################################################################
  # 4) Tokens externos disponibles dentro de los pipelines
  ###########################################################################
  containerEnv:
    - { name: DOCKERHUB_USERNAME , value: "${DOCKERHUB_USERNAME}" }
    - { name: DOCKERHUB_TOKEN    , value: "${DOCKERHUB_TOKEN}"    }
    - { name: GITHUB_TOKEN       , value: "${GITHUB_TOKEN}"       }

  ###########################################################################
  # 5) Jenkins Configuration‚Äëas‚ÄëCode (JCasC)
  ###########################################################################
  JCasC:
    enabled: true
    defaultConfig: false
    configScripts:
      main: |
        jenkins:
          systemMessage: "üöÄ Jenkins en producci√≥n"
          securityRealm:
            local:
              allowsSignup: false
              users:
                - id: "${JENKINS_ADMIN_ID}"
                  password: "${JENKINS_ADMIN_PASSWORD}"
          authorizationStrategy:
            loggedInUsersCanDoAnything:
              allowAnonymousRead: false
          # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Kubernetes Cloud (Agentes como Pods) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          clouds:
            - kubernetes:
                name: kubernetes
                serverUrl: https://kubernetes.default
                skipTlsVerify: true
                namespace: jenkins
{% raw %}
                jenkinsUrl: "http://{{ .Release.Name }}:8080"
                jenkinsTunnel: "{{ .Release.Name }}-agent:50000"
{% endraw %}
                templates:
                  - name: default
                    label: default
                    containers:
                      - name: nodejs
                        image: node:18-alpine
                        command: cat
                        ttyEnabled: true
                      - name: kaniko
                        image: gcr.io/kaniko-project/executor:v1.23.0-debug
                        command: /busybox/cat
                        ttyEnabled: true
                        envVars:
                          - envVar: { key: DOCKER_CONFIG, value: /kaniko/.docker }
                    volumes:
                      - secretVolume:
                          secretName: dockerhub-config
                          mountPath: /kaniko/.docker
        credentials:
          system:
            domainCredentials:
              - credentials:
                  - usernamePassword:
                      id: dockerhub-credentials
                      description: "üîê DockerHub CI/CD"
                      username: "${DOCKERHUB_USERNAME}"
                      password: "${DOCKERHUB_TOKEN}"
                  - string:
                      id: github-ci-token
                      description: "üîê GitHub Token CI"
                      secret: "${GITHUB_TOKEN}"

  ###########################################################################
  # 6) Recursos del contenedor principal
  ###########################################################################
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: "2"
      memory: 4Gi

###############################################################################
# Persistencia de Jenkins (PVC)  Longhorn
###############################################################################
persistence:
  enabled: true
  storageClass: "{{ jenkins_storage_class }}"
  size: 8Gi
  annotations:
    longhorn.io/replica-count: "1"