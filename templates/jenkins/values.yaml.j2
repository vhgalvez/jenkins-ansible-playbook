# templates/jenkins/values.yaml.j2
# ─────────────────────────────────────────────────────────────────────────────
# Jenkins Helm values – ENTORNO PRODUCCIÓN
# ▸ Usa los mismos agentes (NodeJS + Kaniko) que en local
# ▸ Credenciales gestionadas vía Secrets de Kubernetes (ver create_secrets.yml)
# ▸ Preparado para CI/CD con GitHub y DockerHub
# ─────────────────────────────────────────────────────────────────────────────

controller:
  image:
    repository: jenkins/jenkins
    tag: "2.518-jdk21"
    pullPolicy: IfNotPresent

  installWizard: false

  serviceType: ClusterIP
  servicePort: 8080
  targetPort: 8080

  ingress:
    enabled: false

  # ▸ Variables de entorno para plugins (credentials-binding, etc.)
  containerEnv:
    - name: DOCKERHUB_USERNAME
      valueFrom:
        secretKeyRef:
          name: dockerhub-credentials
          key: username
    - name: DOCKERHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: dockerhub-credentials
          key: password
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-ci-token
          key: token

  # ═══════════════════════════════════════════════════════════════════════════
  # JCasC – Configuration as Code
  # ═══════════════════════════════════════════════════════════════════════════
  JCasC:
    enabled: true
    configScripts:
      01-security.yaml: |
        jenkins:
          securityRealm:
            local:
              allowsSignup: false
              users:
                - id: "{{ jenkins_auth_user_ui }}"
                  password: "{{ jenkins_auth_pass_ui }}"
          authorizationStrategy:
            loggedInUsersCanDoAnything:
              allowAnonymousRead: false

      02-credentials.yaml: |
        credentials:
          system:
            domainCredentials:
              - credentials:
                  - usernamePassword:
                      id: "dockerhub-credentials"
                      username: "${DOCKERHUB_USERNAME}"
                      password: "${DOCKERHUB_TOKEN}"
                      description: "DockerHub Access Token for CI/CD"
                  - usernamePassword:
                      id: "github-ci-token"
                      username: "dummy"
                      password: "${GITHUB_TOKEN}"
                      description: "GitHub Token for CI/CD Jobs"

      03-kubernetes-cloud.yaml: |
        jenkins:
          clouds:
            - kubernetes:
                name: "kubernetes"
                serverUrl: "https://kubernetes.default"
                skipTlsVerify: true
                namespace: "jenkins"
                jenkinsUrl: "http://{{ .Release.Name }}:8080"
                jenkinsTunnel: "{{ .Release.Name }}-agent:50000"
                templates:
                  # ▸ Plantilla por defecto (usada por fallback o pruebas)
                  - name: "default"
                    label: "default"
                    idleMinutes: 1
                    containers:
                      - name: "nodejs"
                        image: "node:18-alpine"
                        command: "cat"
                        ttyEnabled: true
                      - name: "kaniko"
                        image: "gcr.io/kaniko-project/executor:v1.23.0-debug"
                        command: "/busybox/cat"
                        ttyEnabled: true
                        envVars:
                          - envVar:
                              key: "DOCKER_CONFIG"
                              value: "/kaniko/.docker"
                    volumes:
                      - secretVolume:
                          secretName: "dockerhub-config"
                          mountPath: "/kaniko/.docker"

                  # ▸ Plantilla especializada para GitOps (uso por Jenkinsfile)
                  - name: "gitops-agent"
                    label: "gitops-agent"
                    idleMinutes: 1
                    containers:
                      - name: "jnlp"
                        image: "jenkins/inbound-agent:3309.v27b_9314fd1a_4-1"
                        args: ^${computer.jnlpmac} ^${computer.name}
                        resourceRequestCpu: "100m"
                        resourceRequestMemory: "256Mi"
                      - name: "nodejs"
                        image: "node:18-alpine"
                        command: "cat"
                        ttyEnabled: true
                      - name: "kaniko"
                        image: "gcr.io/kaniko-project/executor:v1.23.0-debug"
                        command: "/busybox/cat"
                        ttyEnabled: true
                        envVars:
                          - envVar:
                              key: "DOCKER_CONFIG"
                              value: "/kaniko/.docker"
                    volumes:
                      - secretVolume:
                          secretName: "dockerhub-config"
                          mountPath: "/kaniko/.docker"

  # ▸ Plugins requeridos (idénticos a entorno local)
  installPlugins:
    - kubernetes
    - workflow-aggregator
    - git
    - docker-workflow
    - blueocean
    - configuration-as-code
    - credentials-binding
    - ssh-credentials
    - credentials
    - plain-credentials
    - github-oauth
    - role-strategy
  overwritePlugins: true

  # ▸ Recursos mínimos y límites
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: "2"
      memory: 4Gi

# ════════════════════════════════════════════════════════════════════════════
# Persistencia – almacenamiento persistente para el workspace Jenkins
# ════════════════════════════════════════════════════════════════════════════
persistence:
  enabled: true
  storageClass: "{{ .Values.global.storageClass | default 'gp2' }}"
  size: 8Gi