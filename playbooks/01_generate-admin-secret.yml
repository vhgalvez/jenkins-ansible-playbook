# playbooks\01_generate-admin-secret.yml
- name: 🔐 Generar y sellar el Secret jenkins-admin (UI)
  hosts: localhost
  gather_facts: false

  vars_files:
    - ../vars/main.yml

  vars:
    files_dir: "{{ playbook_dir }}/files"
    admin_secret_template: "../templates/secret/jenkins-admin-secret.yaml.j2"
    rendered_admin_secret_path: "{{ files_dir }}/jenkins-admin-unsealed.yaml"
    sealed_admin_secret_path: "{{ files_dir }}/jenkins-admin-sealed.yaml"

    jenkins_admin_secret_name: jenkins-admin
    jenkins_admin_user_key: jenkins-admin-user
    jenkins_admin_pass_key: jenkins-admin-password

  tasks:
    - name: 📥 Cargar .env
      shell: |
        set -a
        source {{ playbook_dir }}/../.env
        env
      args:
        executable: /bin/bash
      register: env_output

    - name: 📌 Registrar valores de UI
      set_fact:
        jenkins_auth_user_ui: "{{ env_output.stdout_lines | select('search', '^JENKINS_AUTH_USER_UI=') | first | regex_replace('^JENKINS_AUTH_USER_UI=', '') }}"
        jenkins_auth_pass_ui_raw: "{{ env_output.stdout_lines | select('search', '^JENKINS_AUTH_PASS_UI=') | first | regex_replace('^JENKINS_AUTH_PASS_UI=', '') }}"

    - name: 🔑 Hashear contraseña UI con bcrypt (prefijo #jbcrypt:)
      shell: |
        python3 -c "import bcrypt; print('#jbcrypt:' + bcrypt.hashpw(b'{{ jenkins_auth_pass_ui_raw }}', bcrypt.gensalt(prefix=b'2a')).decode())"
      register: jenkins_auth_pass_ui_hashed
      no_log: true

    - name: 📂 Crear carpeta temporal si no existe
      file:
        path: "{{ files_dir }}"
        state: directory
      changed_when: false

    - name: 📝 Renderizar el Secret jenkins-admin (sin sellar)
      template:
        src: "{{ admin_secret_template }}"
        dest: "{{ rendered_admin_secret_path }}"
      vars:
        jenkins_auth_user_ui: "{{ jenkins_auth_user_ui }}"
        jenkins_auth_pass_ui: "{{ jenkins_auth_pass_ui_hashed.stdout }}"
        jenkins_admin_secret_name: "{{ jenkins_admin_secret_name }}"
        jenkins_namespace: "{{ jenkins_namespace }}"
        jenkins_admin_user_key: "{{ jenkins_admin_user_key }}"
        jenkins_admin_pass_key: "{{ jenkins_admin_pass_key }}"

    - name: 🔐 Sellar el Secret con kubeseal
      shell: >
        {{ kubeseal_path }}
        --controller-name sealed-secrets-controller
        --controller-namespace kube-system
        --format yaml
        < {{ rendered_admin_secret_path }}
        > {{ sealed_admin_secret_path }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: true

    - name: 🗑️ Eliminar el secreto sin sellar
      file:
        path: "{{ rendered_admin_secret_path }}"
        state: absent
      changed_when: false

    - name: 🚀 Aplicar el SealedSecret jenkins-admin
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }}
        apply -f {{ sealed_admin_secret_path }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
