# playbooks/01_generate-admin-secret.yml
# ---------------------------------------------------------------------------
# Crea y sella (kubeseal) el Secret jenkins‑admin
#   • Usuario/clave para la UI de Jenkins
#   • Clave almacenada como hash bcrypt con prefijo  #jbcrypt:
# ---------------------------------------------------------------------------

- name: 🔐 Generar y sellar el Secret «jenkins-admin»
  hosts: localhost
  gather_facts: false

  vars_files:
    - ../vars/main.yml

  vars:
    files_dir:                  "{{ playbook_dir }}/files"
    admin_secret_template:      "../templates/secret/jenkins-admin-secret.yaml.j2"
    rendered_admin_secret_path: "{{ files_dir }}/jenkins-admin-unsealed.yaml"
    sealed_admin_secret_path:   "{{ files_dir }}/jenkins-admin-sealed.yaml"

    jenkins_admin_secret_name:  jenkins-admin
    jenkins_admin_user_key:     jenkins-admin-user
    jenkins_admin_pass_key:     jenkins-admin-password

  tasks:
  # -------------------------------------------------------------------------
  # 1. Cargar .env y extraer credenciales UI
  # -------------------------------------------------------------------------
  - name: 📥 Cargar .env (si existe) y exponer variables
    ansible.builtin.shell: |
      if [ -f "{{ playbook_dir }}/../.env" ]; then
        set -a && . "{{ playbook_dir }}/../.env" && set +a
      fi
      env
    args:
      executable: /bin/bash
    register: env_output
    changed_when: false

  - name: 📌 Registrar variables JENKINS_AUTH_*_UI
    ansible.builtin.set_fact:
      jenkins_auth_user_ui: >-
        {{ env_output.stdout_lines
           | select('match', '^JENKINS_AUTH_USER_UI=') | first
           | regex_replace('^JENKINS_AUTH_USER_UI=', '') | default('', true) }}
      jenkins_auth_pass_ui_raw: >-
        {{ env_output.stdout_lines
           | select('match', '^JENKINS_AUTH_PASS_UI=') | first
           | regex_replace('^JENKINS_AUTH_PASS_UI=', '') | default('', true) }}

  - name: ❌ Validar que user y pass UI estén definidos
    ansible.builtin.assert:
      that:
        - jenkins_auth_user_ui | length > 0
        - jenkins_auth_pass_ui_raw | length > 0
      fail_msg: "Faltan JENKINS_AUTH_USER_UI o JENKINS_AUTH_PASS_UI."

  # -------------------------------------------------------------------------
  # 2. Generar hash bcrypt  (#jbcrypt:…)
  # -------------------------------------------------------------------------
  - name: 🔑 Hashear contraseña UI con bcrypt
    ansible.builtin.shell: |
      python3 - <<'PY'
      import bcrypt, os, sys
      plaintext = os.environ["PLAINTEXT"].encode()
      print('#jbcrypt:' + bcrypt.hashpw(plaintext, bcrypt.gensalt(prefix=b'2a')).decode())
      PY
    args:
      executable: /bin/bash
    environment:
      PLAINTEXT: "{{ jenkins_auth_pass_ui_raw }}"
    register: bcrypt_hash_result
    changed_when: false
    no_log: true            # protege el hash en los logs

  - name: 💾 Guardar hash en variable
    ansible.builtin.set_fact:
      jenkins_auth_pass_ui_bcrypt: "{{ bcrypt_hash_result.stdout }}"

  # -------------------------------------------------------------------------
  # 3. Renderizar Secret, sellarlo y aplicarlo
  # -------------------------------------------------------------------------
  - name: 📂 Asegurar directorio temporal
    ansible.builtin.file:
      path: "{{ files_dir }}"
      state: directory
      mode: "0755"
    changed_when: false

  - name: 📝 Renderizar Secret jenkins-admin (sin sellar)
    ansible.builtin.template:
      src:  "{{ admin_secret_template }}"
      dest: "{{ rendered_admin_secret_path }}"
    vars:
      jenkins_namespace:         "{{ jenkins_namespace }}"
      jenkins_admin_secret_name: "{{ jenkins_admin_secret_name }}"
      jenkins_admin_user_key:    "{{ jenkins_admin_user_key }}"
      jenkins_admin_pass_key:    "{{ jenkins_admin_pass_key }}"
      jenkins_auth_user_ui:      "{{ jenkins_auth_user_ui }}"
      jenkins_auth_pass_ui:      "{{ jenkins_auth_pass_ui_bcrypt }}"

  - name: 🔐 Sellar el Secret con kubeseal
    ansible.builtin.shell: |
      {{ kubeseal_path }} \
        --controller-name sealed-secrets-controller \
        --controller-namespace kube-system \
        --format yaml \
        < "{{ rendered_admin_secret_path }}" \
        > "{{ sealed_admin_secret_path }}"
    environment:
      KUBECONFIG: "{{ kubeconfig_path }}"
    changed_when: true

  - name: 🗑️ Eliminar archivo temporal sin sellar
    ansible.builtin.file:
      path: "{{ rendered_admin_secret_path }}"
      state: absent
    changed_when: false

  - name: 🚀 Aplicar SealedSecret jenkins-admin
    ansible.builtin.command: >
      {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }}
      apply -f {{ sealed_admin_secret_path }}
    environment:
      KUBECONFIG: "{{ kubeconfig_path }}"
    register: apply_result
    changed_when: "'created' in apply_result.stdout or 'configured' in apply_result.stdout"

  - name: ✅ Resultado de la aplicación
    ansible.builtin.debug:
      msg: "{{ apply_result.stdout | default(apply_result.stderr) }}"