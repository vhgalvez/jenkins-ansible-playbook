# playbooks/01_generate-admin-secret.yml
# ---------------------------------------------------------------------------
# Genera y sella el Secret «jenkins-admin» (contraseña en texto plano)
# ---------------------------------------------------------------------------
- name: 🔐 Generar y sellar el Secret «jenkins-admin»
  hosts: localhost
  gather_facts: false

  vars_files:
    - ../vars/main.yml            # kubeconfig_path, kubeseal_path, etc.

  vars:
    work_dir:            "{{ playbook_dir }}/files"
    tpl_secret:          "../templates/secret/jenkins-admin-secret.yaml.j2"
    tmp_plain:           "{{ work_dir }}/jenkins-admin-unsealed.yaml"
    tmp_sealed:          "{{ work_dir }}/jenkins-admin-sealed.yaml"

    jenkins_admin_secret_name: jenkins-admin
    jenkins_admin_user_key:    jenkins-admin-user
    jenkins_admin_pass_key:    jenkins-admin-password

  tasks:
  - name: 📥 Leer .env (base64)
    slurp:
      src: "{{ playbook_dir }}/../.env"
    register: env_file

  - name: 📌 Extraer credenciales UI
    set_fact:
      env_lines:                 "{{ env_file.content | b64decode | split('\n') }}"
      jenkins_auth_user_ui: >-
        {{ env_lines | select('match','^JENKINS_AUTH_USER_UI=') | first | regex_replace('^JENKINS_AUTH_USER_UI=', '') | default('') }}
      jenkins_auth_pass_ui: >-
        {{ env_lines | select('match','^JENKINS_AUTH_PASS_UI=') | first | regex_replace('^JENKINS_AUTH_PASS_UI=', '') | default('') }}

  - name: ❌ Validar usuario y contraseña
    assert:
      that:
        - jenkins_auth_user_ui | length > 0
        - jenkins_auth_pass_ui | length > 0
      fail_msg: "❌ Faltan JENKINS_AUTH_USER_UI o JENKINS_AUTH_PASS_UI en .env"

  #──────────── Render → Sellar → Aplicar ───────────────────────────────────
  - name: 📂 Crear workdir
    file: { path: "{{ work_dir }}", state: directory, mode: 0755 }

  - name: 📝 Renderizar Secret (sin sellar)
    template:
      src:  "{{ tpl_secret }}"
      dest: "{{ tmp_plain }}"

  - name: 🔐 Sellar el Secret
    shell: |
      {{ kubeseal_path }} \
        --controller-name sealed-secrets-controller \
        --controller-namespace kube-system \
        --format yaml < "{{ tmp_plain }}" > "{{ tmp_sealed }}"
    environment: { KUBECONFIG: "{{ kubeconfig_path }}" }

  - file: { path: "{{ tmp_plain }}", state: absent }   # limpiar

  - name: 🚀 Aplicar SealedSecret
    command: >
      {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }}
      apply -f {{ tmp_sealed }}
    register: apply_res
    changed_when: "'created' in apply_res.stdout or 'configured' in apply_res.stdout"

  - debug: { msg: "{{ apply_res.stdout | default(apply_res.stderr) }}" }