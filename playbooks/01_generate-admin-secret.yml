# playbooks/01_generate-admin-secret.yml
# -----------------------------------------------------------------------------
# Genera y sella (kubeseal) el Secret jenkins-admin
#   ‚Ä¢ Usuario / contrase√±a UI
#   ‚Ä¢ Contrase√±a como hash bcrypt con prefijo #jbcrypt:
# -----------------------------------------------------------------------------

- name: üîê Generar y sellar el Secret ¬´jenkins-admin¬ª
  hosts: localhost
  gather_facts: false

  vars_files:
    - ../vars/main.yml

  vars:
    files_dir: "{{ playbook_dir }}/files"
    admin_secret_template: "../templates/secret/jenkins-admin-secret.yaml.j2"
    rendered_admin_secret_path: "{{ files_dir }}/jenkins-admin-unsealed.yaml"
    sealed_admin_secret_path: "{{ files_dir }}/jenkins-admin-sealed.yaml"

    jenkins_admin_secret_name: jenkins-admin
    jenkins_admin_user_key: jenkins-admin-user
    jenkins_admin_pass_key: jenkins-admin-password

  tasks:
    # -------------------------------------------------------------------------
    # 1. Cargar .env y extraer credenciales UI
    # -------------------------------------------------------------------------
    - name: üì• Cargar .env (si existe) y exportar variables
      shell: |
        if [ -f "{{ playbook_dir }}/../.env" ]; then
          set -a && . "{{ playbook_dir }}/../.env" && set +a
        fi
        env
      args: { executable: /bin/bash }
      register: env_output
      changed_when: false

    - name: üìå Registrar variables JENKINS_AUTH_*_UI
      set_fact:
        jenkins_auth_user_ui: >-
          {{ env_output.stdout_lines
             | select('match', '^JENKINS_AUTH_USER_UI=') | first
             | regex_replace('^JENKINS_AUTH_USER_UI=', '') | default('', true) }}
        jenkins_auth_pass_ui_raw: >-
          {{ env_output.stdout_lines
             | select('match', '^JENKINS_AUTH_PASS_UI=') | first
             | regex_replace('^JENKINS_AUTH_PASS_UI=', '') | default('', true) }}

    - name: ‚ùå Validar que user y pass UI existan
      assert:
        that:
          - jenkins_auth_user_ui | length > 0
          - jenkins_auth_pass_ui_raw | length > 0
        fail_msg: "Faltan JENKINS_AUTH_USER_UI o JENKINS_AUTH_PASS_UI"

    # -------------------------------------------------------------------------
    # 2. Asegurar dependencia bcrypt (solo root)
    # -------------------------------------------------------------------------
    - name: üîç Verificar que el m√≥dulo bcrypt est√© disponible
      shell: "python3 - <<'PY'\nimport bcrypt,sys\nPY"
      args: { executable: /bin/bash }
      register: bcrypt_check
      failed_when: false
      changed_when: false

    - name: ‚ûï Instalar bcrypt para root si falta
      when: bcrypt_check.rc != 0
      shell: "python3 -m pip install --quiet bcrypt"
      args: { executable: /bin/bash }
      register: pip_install
      changed_when: "'Successfully installed' in pip_install.stdout or pip_install.stderr"

    # -------------------------------------------------------------------------
    # 3. Generar hash bcrypt (#jbcrypt:‚Ä¶)
    # -------------------------------------------------------------------------
    - name: üîë Hashear contrase√±a UI con bcrypt
      shell: |
        python3 - <<'PY'
        import bcrypt, os
        pwd = os.environ["PLAINTEXT"].encode()
        print('#jbcrypt:' + bcrypt.hashpw(pwd, bcrypt.gensalt(prefix=b'2a')).decode())
        PY
      args: { executable: /bin/bash }
      environment:
        PLAINTEXT: "{{ jenkins_auth_pass_ui_raw }}"
      register: bcrypt_hash_result
      changed_when: false
      no_log: false # ‚Üê una vez verificado ponlo a true

    - name: üíæ Guardar hash en variable
      set_fact:
        jenkins_auth_pass_ui_bcrypt: "{{ bcrypt_hash_result.stdout }}"

    # -------------------------------------------------------------------------
    # 4. Renderizar, sellar y aplicar el Secret
    # -------------------------------------------------------------------------
    - name: üìÇ Asegurar directorio temporal
      file:
        path: "{{ files_dir }}"
        state: directory
        mode: "0755"
      changed_when: false

    - name: üìù Renderizar Secret jenkins-admin (sin sellar)
      template:
        src: "{{ admin_secret_template }}"
        dest: "{{ rendered_admin_secret_path }}"
      vars:
        jenkins_namespace: "{{ jenkins_namespace }}"
        jenkins_admin_secret_name: "{{ jenkins_admin_secret_name }}"
        jenkins_admin_user_key: "{{ jenkins_admin_user_key }}"
        jenkins_admin_pass_key: "{{ jenkins_admin_pass_key }}"
        jenkins_auth_user_ui: "{{ jenkins_auth_user_ui }}"
        jenkins_auth_pass_ui: "{{ jenkins_auth_pass_ui_bcrypt }}"

    - name: üîê Sellar el Secret con kubeseal
      shell: |
        {{ kubeseal_path }} \
          --controller-name sealed-secrets-controller \
          --controller-namespace kube-system \
          --format yaml \
          < "{{ rendered_admin_secret_path }}" \
          > "{{ sealed_admin_secret_path }}"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: true

    - name: üóëÔ∏è Eliminar archivo temporal sin sellar
      file:
        path: "{{ rendered_admin_secret_path }}"
        state: absent
      changed_when: false

    - name: üöÄ Aplicar SealedSecret jenkins-admin
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }}
        apply -f {{ sealed_admin_secret_path }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: apply_result
      changed_when: "'created' in apply_result.stdout or 'configured' in apply_result.stdout"

    - name: ‚úÖ Resultado
      debug:
        msg: "{{ apply_result.stdout | default(apply_result.stderr) }}"
