# playbooks/01_generate-auth-secret.yml
- name: 🔐 Generar y sellar el Secret de basic-auth para Jenkins
  hosts: localhost
  gather_facts: false
  become: false

  vars_files:
    - ../vars/main.yml

  vars:
    files_dir: "{{ playbook_dir }}/files"
    secret_template: "../templates/secret/basic-auth-secret.yaml.j2"
    rendered_unsealed_secret_path: "{{ files_dir }}/jenkins-dashboard-secret-unsealed.yaml"
    sealed_secret_path: "{{ files_dir }}/jenkins-dashboard-sealed.yaml"
    kubeseal_path: "{{ kubeseal_path }}"
    kubeconfig_path: "{{ kubeconfig_path }}"
    kubectl_path: "{{ kubectl_path | default('kubectl') }}"

  tasks:
    - name: 📂 Crear el directorio de archivos si no existe
      file:
        path: "{{ files_dir }}"
        state: directory
      changed_when: false

    - name: 📋 Verificar que kubeseal esté instalado
      stat:
        path: "{{ kubeseal_path }}"
      register: kubeseal_check

    - name: ❌ Abortar si kubeseal no está instalado
      fail:
        msg: "❌ kubeseal no está instalado en {{ kubeseal_path }}. Por favor, instálalo."
      when: not kubeseal_check.stat.exists

    - name: ⚙️ Verificar que las variables de autenticación estén definidas
      fail:
        msg: "❌ Las variables jenkins_auth_user y jenkins_auth_pass deben estar definidas en main.yml o como entorno."
      when:
        - jenkins_auth_user is not defined or jenkins_auth_user | trim == ""
        - jenkins_auth_pass is not defined or jenkins_auth_pass | trim == ""

    - name: 🔑 Generar cadena básica con htpasswd (bcrypt)
      shell: echo "{{ jenkins_auth_pass }}" | htpasswd -i -B -n "{{ jenkins_auth_user }}"
      register: basic_auth_string
      changed_when: false
      no_log: true

    - name: 🔐 Codificar "user:hash" en base64
      set_fact:
        basic_auth: "{{ basic_auth_string.stdout | b64encode }}"

    - name: 📝 Renderizar plantilla del Secret sin sellar (unsealed)
      template:
        src: "{{ secret_template }}"
        dest: "{{ rendered_unsealed_secret_path }}"
      vars:
        basic_auth: "{{ basic_auth }}"
        secret_name: "{{ jenkins_secret_name }}" # Usar directamente la variable de main.yml
        namespace_tpl: "{{ jenkins_namespace }}" # Usar directamente la variable de main.yml

    - name: 🔐 Sellar el Secret de Jenkins con kubeseal
      shell: >
        {{ kubeseal_path }}
        --controller-name sealed-secrets-controller
        --controller-namespace kube-system
        --format yaml
        < {{ rendered_unsealed_secret_path }}
        > {{ sealed_secret_path }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: true

    - name: 🗑️ Eliminar el Secret sin sellar
      file:
        path: "{{ rendered_unsealed_secret_path }}"
        state: absent
      changed_when: false

    - name: 📦 Crear el namespace de Jenkins si no existe
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }}
        get namespace {{ jenkins_namespace }} || kubectl create namespace {{ jenkins_namespace }}
      register: create_namespace_result
      changed_when: "'created' in create_namespace_result.stdout"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ignore_errors: true

    - name: 🚀 Aplicar SealedSecret para Jenkins
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }}
        apply -f {{ sealed_secret_path }}
      register: apply_sealed_secret_result
      changed_when: "'created' in apply_sealed_secret_result.stdout or 'configured' in apply_sealed_secret_result.stdout"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
