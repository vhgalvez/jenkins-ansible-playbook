# playbooks/05_install_jenkins.yml
# ────────────────────────────────────────────────────────────────
# 🚀 Despliega Jenkins con Helm + configuración CasC online
# 📦 Instala CRDs de Traefik si no están presentes
# ────────────────────────────────────────────────────────────────

- name: Instalar CRDs de Traefik y Jenkins con Helm
  hosts: localhost
  gather_facts: false

  vars_files:
    - ../vars/main.yml

  environment:
    PATH: "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
    KUBECONFIG: "{{ kubeconfig_path }}"

  pre_tasks:
    - name: ✅ Confirmar carga de variables críticas
      assert:
        that:
          - jenkins_storage_class is defined
          - jenkins_release_name is defined
          - jenkins_chart_version is defined
          - helm_namespace is defined
        fail_msg: "❌ Falta una variable obligatoria en vars/main.yml"

  tasks:
    # ────────────────────────────── TRAEFIK CRDs ──────────────────────────────
    - name: 🔄 Añadir repositorio Helm de Traefik
      kubernetes.core.helm_repository:
        name: traefik
        repo_url: "https://traefik.github.io/charts"
        state: present

    - name: 🔍 Verificar si existe el CRD ingressroutes.traefik.io
      command: kubectl get crd ingressroutes.traefik.io --ignore-not-found
      register: traefik_crd_check
      changed_when: false

    - name: ➕ Instalar CRDs de Traefik si no existen
      command: >
        helm upgrade --install traefik-crds traefik/traefik-crds
        --namespace kube-system --create-namespace
      when: traefik_crd_check.stdout == ""

    # ─────────────────────────────── Jenkins Helm ───────────────────────────────
    - name: 📝 Renderizar template values.yaml para Jenkins
      template:
        src: ../templates/jenkins/values.yaml.j2
        dest: /tmp/jenkins_values_rendered.yaml

    - name: 📦 Asegurar existencia del namespace Jenkins
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ helm_namespace }}"
        state: present

    - name: ➕ Añadir repositorio Helm de Jenkins
      kubernetes.core.helm_repository:
        name: jenkins
        repo_url: https://charts.jenkins.io
        state: present

    - name: 🚀 Desplegar Jenkins con Helm (plugins vía initContainer)
      kubernetes.core.helm:
        name: "{{ jenkins_release_name }}"
        chart_ref: jenkins/jenkins
        release_namespace: "{{ helm_namespace }}"
        create_namespace: false
        values_files:
          - /tmp/jenkins_values_rendered.yaml
        chart_version: "{{ jenkins_chart_version }}"
        update_repo_cache: true

    - name: ⏱️ Esperar que Jenkins esté corriendo (Pod jenkins-0)
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ helm_namespace }}"
        name: "{{ jenkins_release_name }}-0"
      register: jenkins_pod_info
      retries: 30
      delay: 10
      until:
        - jenkins_pod_info.resources | length > 0
        - jenkins_pod_info.resources[0].status.phase == "Running"

    - name: 🎉 Jenkins desplegado correctamente
      debug:
        msg: "✅ Jenkins está en estado Running en el namespace {{ helm_namespace }}"