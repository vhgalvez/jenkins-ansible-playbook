# playbooks/04_install_jenkins.yml
# ---------------------------------------------------------------------------
# Instala/actualiza:
#   • CRDs de Traefik (si faltan)
#   • Jenkins (Helm) + ConfigMap con plugins pre‑empaquetados
# ---------------------------------------------------------------------------

- name: Instalar CRDs de Traefik y Jenkins con Helm
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../vars/main.yml                         # ← define jenkins_* variables
  environment:
    PATH: "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
    KUBECONFIG: "{{ kubeconfig_path }}"

  pre_tasks:
    - name: ✅ Confirmar carga de variables críticas
      assert:
        that:
          - jenkins_storage_class is defined
          - jenkins_release_name   is defined
          - jenkins_chart_version  is defined
          - helm_namespace         is defined
          - jenkins_plugins_configmap is defined
        msg: "❌ Falta una variable obligatoria en vars/main.yml"

  tasks:
  - name: 📂 Crear carpeta de plugins si no existe
    file:
      path: "{{ jenkins_plugins_path }}"
      state: directory
      mode: '0755'
    when: jenkins_plugins_path is defined
    
    # ─────────────────────────── TRAEFIK CRDs ────────────────────────────
    - name: Add Helm repository for Traefik
      kubernetes.core.helm_repository:
        name: traefik
        repo_url: "https://traefik.github.io/charts"
        state: present

    - name: Verify Traefik CRD existence
      command: kubectl get crd ingressroutes.traefik.io --ignore-not-found
      register: traefik_crd_check
      changed_when: false

    - name: Install Traefik CRDs if missing
      command: >
        helm upgrade --install traefik-crds traefik/traefik-crds
        --namespace kube-system --create-namespace
      when: traefik_crd_check.stdout == ""

    # ─────────────────────────── JENKINS (Helm) ──────────────────────────
    - name: 📝 Renderizar values.yaml de Jenkins ➜ ruta temporal
      template:
        src:  ../templates/jenkins/values.yaml.j2
        dest: /tmp/jenkins_values_rendered.yaml

    - name: 📦 Asegurar namespace Jenkins
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ helm_namespace }}"
        state: present

    - name: ➕ Añadir repo Helm Jenkins
      kubernetes.core.helm_repository:
        name: jenkins
        repo_url: https://charts.jenkins.io
        state: present

    # ───── ConfigMap de plugins (opcional pero recomendado) ─────
    - name: 🔍 Comprobar existencia de carpeta de plugins
      stat:
        path: "{{ jenkins_plugins_path | default('') }}"
      register: plugins_dir

    - name: 🛑 Abortamos si se definió jenkins_plugins_path pero no existe
      when:
        - jenkins_plugins_path is defined
        - not plugins_dir.stat.exists
      fail:
        msg: "La ruta {{ jenkins_plugins_path }} no existe; revisa vars/main.yml"

    - name: 📦 (Re)crear ConfigMap con plugins empaquetados
      when: plugins_dir.stat.exists | default(false)
      block:
        - name: Eliminar ConfigMap previo
          kubernetes.core.k8s:
            state: absent
            api_version: v1
            kind: ConfigMap
            namespace: "{{ helm_namespace }}"
            name: "{{ jenkins_plugins_configmap }}"

        - name: Crear nuevo ConfigMap con *.hpi
          command: >
            kubectl create configmap {{ jenkins_plugins_configmap }}
            -n {{ helm_namespace }} --from-file={{ jenkins_plugins_path }}

    # ───── Despliegue / upgrade Helm ─────
    - name: 🚀 helm upgrade --install Jenkins
      command: >
        helm upgrade --install {{ jenkins_release_name }} jenkins/jenkins
        --namespace {{ helm_namespace }}
        --create-namespace=false
        --values /tmp/jenkins_values_rendered.yaml
        --version {{ jenkins_chart_version }}

    - name: ⏱️ Esperar a que el pod Jenkins‑0 esté Running
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ helm_namespace }}"
        name: "{{ jenkins_release_name }}-0"
      register: jenkins_pod_info
      retries: 20       # ≈ 5 min (20×15 s)
      delay: 15
      until:
        - jenkins_pod_info.resources | length > 0
        - jenkins_pod_info.resources[0].status.phase == "Running"

    - name: 🎉 Jenkins desplegado y operativo
      debug:
        msg: "Jenkins está Running en el namespace {{ helm_namespace }} 🚀"